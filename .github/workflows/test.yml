name: ðŸ§ª Tests

on:
  pull_request:
    branches:
      - main
      - master
      - feature/**
      - fix/**
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  pull-requests: write

jobs:
  integration-tests:
    name: Integration Tests (Postgres)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lichen_memory_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # PostgreSQL connection
      PGHOST: localhost
      PGPORT: 5432
      PGDATABASE: lichen_memory_test
      PGUSER: postgres
      PGPASSWORD: postgres
      PGSSL: false

      # Test environment
      NODE_ENV: test
      PERSISTENCE: postgres

      # Encryption (using memory KMS for tests)
      ENCRYPTION_ENABLED: true
      KMS_PROVIDER: memory
      DEV_KEK_BASE64: dGVzdC1rZWstZm9yLWNpLXRlc3Rpbmctb25seS0zMi1ieXRlcw==  # test-only KEK

      # Phase 3.2: Ledger configuration for graceful degradation
      LEDGER_ENABLED: false
      LEDGER_OPTIONAL: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -U postgres; do
            echo "Waiting for Postgres..."
            sleep 2
          done
          echo "âœ… Postgres is ready"

      - name: Apply database migrations
        run: |
          echo "Applying migrations..."
          psql -h localhost -U postgres -d lichen_memory_test -f migrations/001_create_memory_records.sql
          psql -h localhost -U postgres -d lichen_memory_test -f migrations/002_partitions.sql
          psql -h localhost -U postgres -d lichen_memory_test -f migrations/003_add_encryption_version.sql
          echo "âœ… Migrations applied"

      - name: Verify database schema
        run: |
          echo "Verifying schema..."
          psql -h localhost -U postgres -d lichen_memory_test -c "\dt"
          psql -h localhost -U postgres -d lichen_memory_test -c "\d memory_records"
          echo "âœ… Schema verified"

      - name: Run tests
        run: npm test

      - name: Generate coverage summary
        if: always()
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "âœ… Integration tests completed" >> $GITHUB_STEP_SUMMARY
          echo "Database: PostgreSQL 14" >> $GITHUB_STEP_SUMMARY
          echo "Environment: Testcontainers" >> $GITHUB_STEP_SUMMARY

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-results/
          retention-days: 7
